/*
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 *  Copyright @2019 Jerome Lelasseux. All rights reserved.
 *
 *  This file is part of the JJazzLabX software.
 *   
 *  JJazzLabX is free software: you can redistribute it and/or modify
 *  it under the terms of the Lesser GNU General Public License (LGPLv3) 
 *  as published by the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *
 *  JJazzLabX is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with JJazzLabX.  If not, see <https://www.gnu.org/licenses/>
 * 
 *  Contributor(s): 
 */
package org.jjazz.instrumentsoptions;

import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JComboBox;
import javax.swing.SpinnerListModel;
import org.jjazz.midi.MidiConst;
import org.jjazz.musiccontrol.MusicController;
import org.jjazz.musiccontrol.ClickManager;
import org.jjazz.rhythmmusicgeneration.spi.MusicGenerationException;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.Exceptions;

final class ClickPanel extends javax.swing.JPanel
{

    private final ClickOptionsPanelController controller;
    private SpinnerListModel percussionListModel;

    ClickPanel(ClickOptionsPanelController controller)
    {
        this.controller = controller;
        ArrayList<String> percussions = new ArrayList<>();
        for (String name : MidiConst.getGMPercussionMap())
        {
            if (name != null)
            {
                percussions.add(name);
            }
        }
        percussionListModel = new SpinnerListModel(percussions);
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      jPanel1 = new javax.swing.JPanel();
      jLabel1 = new javax.swing.JLabel();
      lbl_lowVelocity = new javax.swing.JLabel();
      btn_Hear = new javax.swing.JButton();
      spn_velocityHigh = new org.jjazz.ui.utilities.WheelSpinner();
      spn_velocityLow = new org.jjazz.ui.utilities.WheelSpinner();
      lbl_percussion = new javax.swing.JLabel();
      lbl_highVelocity = new javax.swing.JLabel();
      combo_Percussion = new JComboBox<>(MidiConst.getGMPercussions());
      spn_channel = new org.jjazz.ui.utilities.WheelSpinner();
      helpTextArea1 = new org.jjazz.ui.utilities.HelpTextArea();

      org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.jLabel1.text")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(lbl_lowVelocity, org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.lbl_lowVelocity.text")); // NOI18N
      lbl_lowVelocity.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.lbl_lowVelocity.toolTipText")); // NOI18N

      btn_Hear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jjazz/instrumentsoptions/resources/Speaker-20x20.png"))); // NOI18N
      org.openide.awt.Mnemonics.setLocalizedText(btn_Hear, org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.btn_Hear.text")); // NOI18N
      btn_Hear.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.btn_Hear.toolTipText")); // NOI18N
      btn_Hear.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            btn_HearActionPerformed(evt);
         }
      });

      spn_velocityHigh.setModel(new javax.swing.SpinnerNumberModel(0, 0, 127, 1));
      spn_velocityHigh.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.spn_velocityHigh.toolTipText")); // NOI18N
      spn_velocityHigh.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            spn_velocityHighStateChanged(evt);
         }
      });

      spn_velocityLow.setModel(new javax.swing.SpinnerNumberModel(0, 0, 127, 1));
      spn_velocityLow.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.spn_velocityLow.toolTipText")); // NOI18N
      spn_velocityLow.addChangeListener(new javax.swing.event.ChangeListener()
      {
         public void stateChanged(javax.swing.event.ChangeEvent evt)
         {
            spn_velocityLowStateChanged(evt);
         }
      });

      org.openide.awt.Mnemonics.setLocalizedText(lbl_percussion, org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.lbl_percussion.text")); // NOI18N
      lbl_percussion.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.lbl_percussion.toolTipText")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(lbl_highVelocity, org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.lbl_highVelocity.text")); // NOI18N
      lbl_highVelocity.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.lbl_highVelocity.toolTipText")); // NOI18N

      combo_Percussion.setMaximumRowCount(16);
      combo_Percussion.addItemListener(new java.awt.event.ItemListener()
      {
         public void itemStateChanged(java.awt.event.ItemEvent evt)
         {
            combo_PercussionItemStateChanged(evt);
         }
      });

      spn_channel.setModel(new javax.swing.SpinnerNumberModel(10, 1, 16, 1));
      spn_channel.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.spn_channel.toolTipText")); // NOI18N

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(lbl_percussion)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(combo_Percussion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addComponent(btn_Hear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(112, 112, 112)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lbl_lowVelocity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spn_velocityLow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                           .addComponent(jLabel1)
                           .addComponent(lbl_highVelocity))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                           .addComponent(spn_velocityHigh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                           .addComponent(spn_channel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
            .addContainerGap())
      );
      jPanel1Layout.setVerticalGroup(
         jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(lbl_percussion)
               .addComponent(combo_Percussion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jLabel1)
               .addComponent(spn_channel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(btn_Hear, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addGroup(jPanel1Layout.createSequentialGroup()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(spn_velocityHigh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(lbl_highVelocity))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(spn_velocityLow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(lbl_lowVelocity)))))
      );

      helpTextArea1.setBorder(null);
      helpTextArea1.setColumns(20);
      helpTextArea1.setRows(5);
      helpTextArea1.setText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.helpTextArea1.text")); // NOI18N

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(10, 10, 10)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(helpTextArea1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(helpTextArea1, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

    private void spn_velocityHighStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spn_velocityHighStateChanged
    {//GEN-HEADEREND:event_spn_velocityHighStateChanged
        controller.changed();
    }//GEN-LAST:event_spn_velocityHighStateChanged

    private void spn_velocityLowStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spn_velocityLowStateChanged
    {//GEN-HEADEREND:event_spn_velocityLowStateChanged
        controller.changed();
    }//GEN-LAST:event_spn_velocityLowStateChanged

    private void combo_PercussionItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_combo_PercussionItemStateChanged
    {//GEN-HEADEREND:event_combo_PercussionItemStateChanged
        controller.changed();
    }//GEN-LAST:event_combo_PercussionItemStateChanged

   private void btn_HearActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_HearActionPerformed
   {//GEN-HEADEREND:event_btn_HearActionPerformed
       combo_Percussion.setEnabled(false);
       btn_Hear.setEnabled(false);

       Runnable endAction = new Runnable()
       {
           @Override
           public void run()
           {
               combo_Percussion.setEnabled(true);
               btn_Hear.setEnabled(true);
           }
       };
       // Send MIDI messages for the selected instrument
       int pitch = Arrays.asList(MidiConst.getGMPercussionMap()).indexOf(combo_Percussion.getSelectedItem());
       MusicController mc = MusicController.getInstance();
       try
       {
           mc.playTestNotes((int) spn_channel.getValue() - 1, pitch, 0, endAction);
       } catch (MusicGenerationException ex)
       {
           NotifyDescriptor d = new NotifyDescriptor.Message(ex.getLocalizedMessage(), NotifyDescriptor.ERROR_MESSAGE);
           DialogDisplayer.getDefault().notify(d);
       }
   }//GEN-LAST:event_btn_HearActionPerformed

    void load()
    {
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(ClickPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(ClickPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
        combo_Percussion.setSelectedItem(MidiConst.getGMPercussionMap()[ClickManager.getInstance().getClickPitch()]);
        spn_velocityHigh.setValue(ClickManager.getInstance().getClickVelocityHigh());
        spn_velocityLow.setValue(ClickManager.getInstance().getClickVelocityLow());
        spn_channel.setValue(ClickManager.getInstance().getChannel() + 1);
    }

    void store()
    {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(ClickPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(ClickPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());

        int pitch = Arrays.asList(MidiConst.getGMPercussionMap()).indexOf(combo_Percussion.getSelectedItem());
        ClickManager.getInstance().setClickPitch(pitch);
        ClickManager.getInstance().setClickVelocityHigh((int) spn_velocityHigh.getValue());
        ClickManager.getInstance().setClickVelocityLow((int) spn_velocityLow.getValue());
        ClickManager.getInstance().setChannel((int) spn_channel.getValue() - 1);
    }

    boolean valid()
    {
        // TODO check whether form is consistent and complete
        return true;
    }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btn_Hear;
   private javax.swing.JComboBox<String> combo_Percussion;
   private org.jjazz.ui.utilities.HelpTextArea helpTextArea1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JLabel lbl_highVelocity;
   private javax.swing.JLabel lbl_lowVelocity;
   private javax.swing.JLabel lbl_percussion;
   private org.jjazz.ui.utilities.WheelSpinner spn_channel;
   private org.jjazz.ui.utilities.WheelSpinner spn_velocityHigh;
   private org.jjazz.ui.utilities.WheelSpinner spn_velocityLow;
   // End of variables declaration//GEN-END:variables
}

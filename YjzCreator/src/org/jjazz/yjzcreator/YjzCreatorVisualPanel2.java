/*
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 *  Copyright @2019 Jerome Lelasseux. All rights reserved.
 *
 *  This file is part of the JJazzLabX software.
 *   
 *  JJazzLabX is free software: you can redistribute it and/or modify
 *  it under the terms of the Lesser GNU General Public License (LGPLv3) 
 *  as published by the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *
 *  JJazzLabX is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with JJazzLabX.  If not, see <https://www.gnu.org/licenses/>
 * 
 *  Contributor(s): 
 */
package org.jjazz.yjzcreator;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import org.jjazz.harmony.api.TimeSignature;
import org.jjazz.rhythm.database.api.RhythmDatabase;
import org.jjazz.rhythm.database.api.RhythmInfo;
import org.jjazz.rhythm.spi.RhythmProvider;
import org.jjazz.rhythmselectiondialog.api.RhythmTable;
import org.jjazz.util.api.ResUtil;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;

public final class YjzCreatorVisualPanel2 extends JPanel implements ActionListener
{

    private final RhythmTable rhythmTable = new RhythmTable();
    private final RhythmProvider stdYamahaRhythmProvider;
    private static final Logger LOGGER = Logger.getLogger(YjzCreatorVisualPanel2.class.getSimpleName());

    /**
     * Creates new form YjzCreatorVisualPanel2
     */
    public YjzCreatorVisualPanel2()
    {
        initComponents();

        cmb_timeSignature.setSelectedItem(TimeSignature.FOUR_FOUR);

        // Find the standard Yamaha style provider
        var rdb = RhythmDatabase.getDefault();
        stdYamahaRhythmProvider = rdb.getRhythmProvider("YamahaRhythmProviderID");
        if (stdYamahaRhythmProvider == null)
        {
            String msg = "Rhythm provider for standard Yamaha styles not found !";
            NotifyDescriptor d = new NotifyDescriptor.Message(msg, NotifyDescriptor.ERROR_MESSAGE);
            DialogDisplayer.getDefault().notify(d);
            return;
        }


        // 4/4 by default
        cmb_timeSignature.addActionListener(this);


        // Update the rhythm table
        updateRhythmTable(TimeSignature.FOUR_FOUR);


        rhythmTable.addMouseListener(new MouseAdapter()
        {
            @Override
            public void mouseClicked(MouseEvent e)
            {
                handleMouseClicked(e);
            }
        });

    }

    public RhythmTable getRhythmTable()
    {
        return rhythmTable;
    }

    @Override
    public String getName()
    {
        return ResUtil.getString(getClass(),"BASE YAMAHA STYLE");
    }

    // -----------------------------------------------------------------------------------
    // ActionListener implementation
    // -----------------------------------------------------------------------------------    
    @Override
    public void actionPerformed(ActionEvent e)
    {
        if (e.getSource() == cmb_timeSignature)
        {
            TimeSignature ts = cmb_timeSignature.getItemAt(cmb_timeSignature.getSelectedIndex());
            updateRhythmTable(ts);
        }
    }

    // -----------------------------------------------------------------------------------
    // Private methods
    // -----------------------------------------------------------------------------------        
    /**
     * Reset the rhythm table with rhythm with specified TimeSignature
     * <p>
     * @param ts
     * @param sri
     */
    private void updateRhythmTable(TimeSignature ts)
    {
        // Refresh the list of rhythms        
        RhythmDatabase rdb = RhythmDatabase.getDefault();
        List<RhythmInfo> rhythms = rdb.getRhythms(stdYamahaRhythmProvider)
                .stream()
                .filter(r -> r.getTimeSignature().equals(ts))
                .toList();

        // Update the table
        rhythmTable.getModel().setRhythms(rhythms);
    }

    private void handleMouseClicked(MouseEvent e)
    {
        if (e.getClickCount() == 2)
        {
            // Next step
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmb_timeSignature = new JComboBox<>(TimeSignature.values());
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = rhythmTable;
        jScrollPane1 = new javax.swing.JScrollPane();
        helpTextArea1 = new org.jjazz.ui.utilities.api.HelpTextArea();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(YjzCreatorVisualPanel2.class, "YjzCreatorVisualPanel2.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(YjzCreatorVisualPanel2.class, "YjzCreatorVisualPanel2.jLabel2.text")); // NOI18N

        jScrollPane2.setViewportView(jTable1);

        jScrollPane1.setBackground(null);
        jScrollPane1.setBorder(null);

        helpTextArea1.setBackground(null);
        helpTextArea1.setColumns(20);
        helpTextArea1.setRows(1);
        helpTextArea1.setText(org.openide.util.NbBundle.getMessage(YjzCreatorVisualPanel2.class, "YjzCreatorVisualPanel2.helpTextArea1.text")); // NOI18N
        jScrollPane1.setViewportView(helpTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmb_timeSignature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmb_timeSignature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<TimeSignature> cmb_timeSignature;
    private org.jjazz.ui.utilities.api.HelpTextArea helpTextArea1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

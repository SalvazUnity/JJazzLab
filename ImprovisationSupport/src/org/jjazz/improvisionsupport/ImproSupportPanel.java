/*
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 *  Copyright @2019 Jerome Lelasseux. All rights reserved.
 *
 *  This file is part of the JJazzLabX software.
 *   
 *  JJazzLabX is free software: you can redistribute it and/or modify
 *  it under the terms of the Lesser GNU General Public License (LGPLv3) 
 *  as published by the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *
 *  JJazzLabX is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with JJazzLabX.  If not, see <https://www.gnu.org/licenses/>
 * 
 *  Contributor(s): 
 */
package org.jjazz.improvisionsupport;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Arrays;
import javax.swing.DefaultComboBoxModel;

/**
 * The improvisation support panel.
 */
public class ImproSupportPanel extends javax.swing.JPanel implements PropertyChangeListener, ActionListener
{

    private ImproSupport model;


    public ImproSupportPanel()
    {
        initComponents();

        // Initialize the combo box
        var cmb_model = new DefaultComboBoxModel();
        cmb_model.addAll(Arrays.asList(ImproSupport.Mode.values()));
        cmb_improSupportMode.setModel(cmb_model);
        cmb_improSupportMode.addActionListener(this);

        refreshUI();

    }

    public void setModel(ImproSupport improSupport)
    {
        if (this.model != null)
        {
            this.model.removePropertyChangeListener(this);
        }
        this.model = improSupport;
        if (this.model != null)
        {
            this.model.addPropertyChangeListener(this);
        }
        refreshUI();
    }

    public void closing()
    {
        if (model != null)
        {
            model.setEnabled(false);
        }
    }

    public void opened()
    {

    }
    // ================================================================================    
    // PropertyChangeListener interface
    // ================================================================================   

    @Override
    public void propertyChange(PropertyChangeEvent evt)
    {
        if (evt.getSource() == model)
        {
            refreshUI();
        }
    }
    // ===============================================================================
    // ActionListener interface
    // ===============================================================================

    @Override
    public void actionPerformed(ActionEvent ae)
    {
        if (ae.getSource() == cmb_improSupportMode)
        {
            model.setMode((ImproSupport.Mode) cmb_improSupportMode.getSelectedItem());
        }
    }

    // ==========================================================================
    // Private methods
    // ==========================================================================    

    private void refreshUI()
    {
        cb_enable.setEnabled(model != null);
        boolean b = model != null && model.isEnabled();
        cb_enable.setSelected(b);
        cmb_improSupportMode.setEnabled(b);
        hlp_area.setEnabled(b);
        btn_generate.setEnabled(b);
        if (model != null)
        {
            var mode = model.getMode();
            cmb_improSupportMode.removeActionListener(this);
            cmb_improSupportMode.setSelectedItem(mode);
            cmb_improSupportMode.addActionListener(this);
            hlp_area.setText(mode.getHelpText());
        }
    }

    // ==========================================================================
    // Inner classes
    // ==========================================================================    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btn_generate = new javax.swing.JButton();
        cmb_improSupportMode = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        hlp_area = new org.jjazz.uiutilities.api.HelpTextArea();
        cb_enable = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(btn_generate, org.openide.util.NbBundle.getMessage(ImproSupportPanel.class, "ImproSupportPanel.btn_generate.text")); // NOI18N
        btn_generate.setToolTipText(org.openide.util.NbBundle.getMessage(ImproSupportPanel.class, "ImproSupportPanel.btn_generate.toolTipText")); // NOI18N
        btn_generate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_generateActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(null);

        hlp_area.setColumns(20);
        hlp_area.setRows(5);
        jScrollPane1.setViewportView(hlp_area);

        org.openide.awt.Mnemonics.setLocalizedText(cb_enable, org.openide.util.NbBundle.getMessage(ImproSupportPanel.class, "ImproSupportPanel.cb_enable.text")); // NOI18N
        cb_enable.setToolTipText(org.openide.util.NbBundle.getMessage(ImproSupportPanel.class, "ImproSupportPanel.cb_enable.toolTipText")); // NOI18N
        cb_enable.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cb_enableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_generate)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cb_enable)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(cmb_improSupportMode, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cb_enable)
                .addGap(18, 18, 18)
                .addComponent(cmb_improSupportMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_generate)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_generateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_generateActionPerformed
    {//GEN-HEADEREND:event_btn_generateActionPerformed
        model.generate();
    }//GEN-LAST:event_btn_generateActionPerformed

    private void cb_enableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cb_enableActionPerformed
    {//GEN-HEADEREND:event_cb_enableActionPerformed
        model.setEnabled(cb_enable.isSelected());
    }//GEN-LAST:event_cb_enableActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_generate;
    private javax.swing.JCheckBox cb_enable;
    private javax.swing.JComboBox<ImproSupport.Mode> cmb_improSupportMode;
    private org.jjazz.uiutilities.api.HelpTextArea hlp_area;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}

/*
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 *  Copyright @2019 Jerome Lelasseux. All rights reserved.
 *
 *  This file is part of the JJazzLab software.
 *   
 *  JJazzLab is free software: you can redistribute it and/or modify
 *  it under the terms of the Lesser GNU General Public License (LGPLv3) 
 *  as published by the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *
 *  JJazzLab is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with JJazzLab.  If not, see <https://www.gnu.org/licenses/>
 * 
 *  Contributor(s): 
 */
package org.jjazz.options;

import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.util.Locale;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import org.jjazz.analytics.api.Analytics;
import org.jjazz.filedirectorymanager.api.FileDirectoryManager;
import org.jjazz.songeditormanager.api.StartupShutdownSongManager;
import org.jjazz.uisettings.api.GeneralUISettings;
import org.jjazz.utilities.api.ResUtil;
import org.openide.DialogDisplayer;
import org.openide.LifecycleManager;
import org.openide.NotifyDescriptor;

final class GeneralPanel extends javax.swing.JPanel
{

    private final GeneralOptionsPanelController controller;

    private static final Logger LOGGER = Logger.getLogger(GeneralPanel.class.getSimpleName());

    GeneralPanel(GeneralOptionsPanelController controller)
    {
        this.controller = controller;


        initComponents();

        cmb_languages.setRenderer(new LocaleCellRenderer());


        // Make button Apply up to date
        cb_disableMouseWheelChangeValue.addActionListener(al -> controller.changed());
        cb_loadLastRecentFile.addActionListener(al -> controller.changed());

    }

  
    private void changeLanguage(Locale locale)
    {
        String msg = ResUtil.getString(getClass(), "CTL_ConfirmRestartToChangeLanguage");
        NotifyDescriptor d = new NotifyDescriptor.Confirmation(msg, NotifyDescriptor.OK_CANCEL_OPTION);
        Object result = DialogDisplayer.getDefault().notify(d);
        if (NotifyDescriptor.OK_OPTION == result)
        {
            var uis = GeneralUISettings.getInstance();
            try
            {
                uis.setLocaleUponRestart(locale);
            } catch (IOException ex)
            {
                d = new NotifyDescriptor.Message(ex.getLocalizedMessage(), NotifyDescriptor.ERROR_MESSAGE);
                DialogDisplayer.getDefault().notify(d);
                return;
            }

            if (org.openide.util.Utilities.isWindows())
            {
                // For some reason does not work on Linux and Mac (language is not changed, needs a real exit)
                LifecycleManager.getDefault().markForRestart();
            }
            LifecycleManager.getDefault().exit();
        }


    }

     /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        cb_loadLastRecentFile = new javax.swing.JCheckBox();
        cb_disableMouseWheelChangeValue = new javax.swing.JCheckBox();
        cmb_languages = new javax.swing.JComboBox<>();
        lbl_language = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(cb_loadLastRecentFile, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.cb_loadLastRecentFile.text")); // NOI18N
        cb_loadLastRecentFile.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                cb_loadLastRecentFileStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cb_disableMouseWheelChangeValue, org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.cb_disableMouseWheelChangeValue.text")); // NOI18N
        cb_disableMouseWheelChangeValue.setToolTipText(org.openide.util.NbBundle.getMessage(GeneralPanel.class, "GeneralPanel.cb_disableMouseWheelChangeValue.toolTipText")); // NOI18N

        cmb_languages.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmb_languagesActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lbl_language, org.openide.util.NbBundle.getBundle(GeneralPanel.class).getString("GeneralPanel.lbl_language.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cb_disableMouseWheelChangeValue)
                    .addComponent(cb_loadLastRecentFile)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmb_languages, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbl_language)))
                .addContainerGap(242, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmb_languages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_language))
                .addGap(20, 20, 20)
                .addComponent(cb_loadLastRecentFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cb_disableMouseWheelChangeValue)
                .addContainerGap(279, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cb_loadLastRecentFileStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_cb_loadLastRecentFileStateChanged
    {//GEN-HEADEREND:event_cb_loadLastRecentFileStateChanged
        controller.changed();
    }//GEN-LAST:event_cb_loadLastRecentFileStateChanged

    private void cmb_languagesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmb_languagesActionPerformed
    {//GEN-HEADEREND:event_cmb_languagesActionPerformed
        controller.changed();
    }//GEN-LAST:event_cmb_languagesActionPerformed

    void load()
    {
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(GeneralPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(GeneralPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());

        LOGGER.fine("load() --");
        cb_loadLastRecentFile.setSelected(StartupShutdownSongManager.getInstance().isOpenRecentFilesUponStartup());
        cb_disableMouseWheelChangeValue.setSelected(!GeneralUISettings.getInstance().isChangeValueWithMouseWheelEnabled());



        // Language combo
        var cmbModel = new DefaultComboBoxModel<Locale>(GeneralUISettings.SUPPORTED_LOCALES);
        cmb_languages.setModel(cmbModel);
        cmb_languages.setSelectedItem(Locale.getDefault());


    }

    void store()
    {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(GeneralPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(GeneralPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
        LOGGER.fine("store() --");
        StartupShutdownSongManager.getInstance().setOpenRecentFilesUponStartup(cb_loadLastRecentFile.isSelected());

        GeneralUISettings.getInstance().setChangeValueWithMouseWheelEnabled(!cb_disableMouseWheelChangeValue.isSelected());

        Analytics.setProperties(Analytics.buildMap("Mouse Wheel Value Change Support", !cb_disableMouseWheelChangeValue.isSelected()));        

        Locale locale = (Locale) cmb_languages.getSelectedItem();
        Locale defLocale = Locale.getDefault();
        if (!locale.equals(defLocale))
        {
            changeLanguage(locale);
        }


    }

    boolean valid()
    {
        // TODO check whether form is consistent and complete
        return true;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cb_disableMouseWheelChangeValue;
    private javax.swing.JCheckBox cb_loadLastRecentFile;
    private javax.swing.JComboBox<Locale> cmb_languages;
    private javax.swing.JLabel lbl_language;
    // End of variables declaration//GEN-END:variables

    // ========================================================================================================
    // Private classes
    // ========================================================================================================
    private static class LocaleCellRenderer extends DefaultListCellRenderer
    {

        @Override
        @SuppressWarnings("rawtypes")
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus); // returned component=this
            if (value instanceof Locale)
            {
                Locale locale = (Locale) value;
                setText(locale.getDisplayLanguage(Locale.ENGLISH));
            }
            return this;
        }
    }

}

/*
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 *  Copyright @2019 Jerome Lelasseux. All rights reserved.
 *
 *  This file is part of the JJazzLab software.
 *   
 *  JJazzLab is free software: you can redistribute it and/or modify
 *  it under the terms of the Lesser GNU General Public License (LGPLv3) 
 *  as published by the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *
 *  JJazzLab is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with JJazzLab.  If not, see <https://www.gnu.org/licenses/>
 * 
 *  Contributor(s): 
 */
package org.jjazz.pianoroll;

import org.jjazz.pianoroll.api.GhostPhrasesModel;
import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import org.jjazz.midimix.api.MidiMix;
import static org.jjazz.pianoroll.api.GhostPhrasesModel.PROP_PHRASE_LIST;
import static org.jjazz.pianoroll.api.GhostPhrasesModel.PROP_VISIBLE_PHRASE_SELECTION;

/**
 * Let user select the visible ghost phrases.
 */
public class GhostPhrasesPanel extends javax.swing.JPanel implements PropertyChangeListener
{

    private boolean blockChangeEventFiring = false;
    private final GhostPhrasesModel model;
    private static final Logger LOGGER = Logger.getLogger(GhostPhrasesPanel.class.getSimpleName());

    /**
     * Creates a GhostPhrasesPanel
     *
     * @param model
     */
    public GhostPhrasesPanel(GhostPhrasesModel model)
    {
        this.model = model;


        initComponents();
        list_channels.setCellRenderer(new TrackNameCellRenderer());


        list_channels.addListSelectionListener(e -> 
        {
            if (!e.getValueIsAdjusting() && !blockChangeEventFiring)
            {
                this.model.setVisibleChannels(list_channels.getSelectedValuesList());
            }
        });

        this.model.addPropertyChangeListener(this);
        refreshListAndSelection();
    }


    //=============================================================================
    // PropertyChangeListener interface
    //=============================================================================
    @Override
    public void propertyChange(PropertyChangeEvent evt)
    {
        if (evt.getSource() == model)
        {
            switch (evt.getPropertyName())
            {
                case PROP_VISIBLE_PHRASE_SELECTION -> setSelectedTracksSilent(model.getVisibleChannels());
                case PROP_PHRASE_LIST -> refreshListAndSelection();
                default ->
                {
                }
            }
        }
    }

    // ==============================================================================================================
    // Private methods
    // ==============================================================================================================

    private void refreshListAndSelection()
    {
        list_channels.clearSelection();
        var list = new ArrayList<>(model.getAllChannels());
        Collections.sort(list);
        list_channels.setListData(list.toArray(Integer[]::new));
        setSelectedTracksSilent(model.getVisibleChannels());
    }

    /**
     * Set the selected channels without firing selection events.
     * <p>
     *
     * @param selectedChannels
     */
    private void setSelectedTracksSilent(Set<Integer> selectedChannels)
    {
        if (selectedChannels.equals(new HashSet<>(list_channels.getSelectedValuesList())))
        {
            return;
        }

        blockChangeEventFiring = true;
        list_channels.clearSelection();
        for (var channel : selectedChannels)
        {
            list_channels.setSelectedValue(channel, true);
        }
        blockChangeEventFiring = false;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        list_channels = new javax.swing.JList<>();
        btn_clearAll = new javax.swing.JButton();

        list_channels.setToolTipText(org.openide.util.NbBundle.getMessage(GhostPhrasesPanel.class, "GhostPhrasesPanel.list_channels.toolTipText")); // NOI18N
        list_channels.setVisibleRowCount(9);
        jScrollPane1.setViewportView(list_channels);

        org.openide.awt.Mnemonics.setLocalizedText(btn_clearAll, org.openide.util.NbBundle.getMessage(GhostPhrasesPanel.class, "GhostPhrasesPanel.btn_clearAll.text")); // NOI18N
        btn_clearAll.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_clearAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_clearAll)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_clearAll))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_clearAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_clearAllActionPerformed
    {//GEN-HEADEREND:event_btn_clearAllActionPerformed
        model.setVisibleChannels(null);
    }//GEN-LAST:event_btn_clearAllActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_clearAll;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Integer> list_channels;
    // End of variables declaration//GEN-END:variables


    private class TrackNameCellRenderer extends DefaultListCellRenderer
    {

        @Override
        @SuppressWarnings("rawtypes")
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
            super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus); // returned component=this
            if (value instanceof Integer channel)
            {
                MidiMix midiMix = model.getMidiMix();
                String rvName = midiMix.getRhythmVoice(channel).getName();
                String inst = midiMix.getInstrumentMix(channel).getInstrument().getPatchName();
                String name = String.format("%d: %s - %s", channel + 1, rvName, inst);
                setText(name);
            }
            return this;
        }
    }

}

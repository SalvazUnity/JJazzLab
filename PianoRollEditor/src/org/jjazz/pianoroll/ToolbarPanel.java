/*
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 *  Copyright @2019 Jerome Lelasseux. All rights reserved.
 *
 *  This file is part of the JJazzLabX software.
 *   
 *  JJazzLabX is free software: you can redistribute it and/or modify
 *  it under the terms of the Lesser GNU General Public License (LGPLv3) 
 *  as published by the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *
 *  JJazzLabX is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with JJazzLabX.  If not, see <https://www.gnu.org/licenses/>
 * 
 *  Contributor(s): 
 */
package org.jjazz.pianoroll;

import java.awt.Component;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JLabel;
import javax.swing.JList;
import org.jjazz.pianoroll.api.EditTool;
import org.jjazz.pianoroll.api.PianoRollEditor;
import org.jjazz.quantizer.api.Quantization;
import org.jjazz.ui.utilities.api.NoteIcons;


/**
 * Toolbar panel of the PianoRollEditor.
 */
public class ToolbarPanel extends javax.swing.JPanel implements PropertyChangeListener
{

    private final PianoRollEditor editor;

    /**
     * Creates new form ToolbarPanel
     */
    public ToolbarPanel(PianoRollEditor editor, List<EditTool> tools)
    {
        this.editor = editor;
        initComponents();


        var qModel = new DefaultComboBoxModel(Quantization.values());
        qModel.removeElement(Quantization.HALF_BAR);
        qModel.removeElement(Quantization.OFF);
        cmb_quantization.setModel(qModel);
        cmb_quantization.setSelectedItem(editor.getQuantization());
        cmb_quantization.setRenderer(new QuantizationRenderer());


        tbtn_snap.setSelected(editor.isSnapEnabled());

        add(new EditToolBar(editor, tools), 1); // After initial horizontal strut

        editor.addPropertyChangeListener(this);
    }

    // ====================================================================================
    // PropertyChangeListener interface
    // ====================================================================================
    @Override
    public void propertyChange(PropertyChangeEvent evt)
    {
        if (evt.getSource() == editor)
        {
            if (evt.getPropertyName().equals(PianoRollEditor.PROP_SNAP_ENABLED))
            {
                tbtn_snap.setSelected(editor.isSnapEnabled());
            } else if (evt.getPropertyName().equals(PianoRollEditor.PROP_QUANTIZATION))
            {
                cmb_quantization.setSelectedItem(editor.getQuantization());
            }
        }
    }


    // ====================================================================================
    // Private methods
    // ====================================================================================
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(30, 0), new java.awt.Dimension(30, 32767));
        tbtn_snap = new org.jjazz.ui.flatcomponents.api.FlatToggleButton();
        cmb_quantization = new javax.swing.JComboBox<>();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 2));
        add(filler2);
        add(filler1);

        tbtn_snap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jjazz/pianoroll/resources/SnapOFF.png"))); // NOI18N
        tbtn_snap.setToolTipText(org.openide.util.NbBundle.getMessage(ToolbarPanel.class, "ToolbarPanel.tbtn_snap.toolTipText")); // NOI18N
        tbtn_snap.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jjazz/pianoroll/resources/SnapON.png"))); // NOI18N
        tbtn_snap.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tbtn_snapActionPerformed(evt);
            }
        });
        add(tbtn_snap);

        cmb_quantization.setToolTipText(org.openide.util.NbBundle.getMessage(ToolbarPanel.class, "ToolbarPanel.cmb_quantization.toolTipText")); // NOI18N
        cmb_quantization.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmb_quantizationActionPerformed(evt);
            }
        });
        add(cmb_quantization);
    }// </editor-fold>//GEN-END:initComponents

    private void cmb_quantizationActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmb_quantizationActionPerformed
    {//GEN-HEADEREND:event_cmb_quantizationActionPerformed
        editor.setQuantization((Quantization) cmb_quantization.getSelectedItem());
    }//GEN-LAST:event_cmb_quantizationActionPerformed

    private void tbtn_snapActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tbtn_snapActionPerformed
    {//GEN-HEADEREND:event_tbtn_snapActionPerformed
        editor.setSnapEnabled(tbtn_snap.isSelected());
    }//GEN-LAST:event_tbtn_snapActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Quantization> cmb_quantization;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private org.jjazz.ui.flatcomponents.api.FlatToggleButton tbtn_snap;
    // End of variables declaration//GEN-END:variables


    /**
     * A renderer for Quantization values
     */
    public class QuantizationRenderer extends DefaultListCellRenderer
    {

        @Override
        @SuppressWarnings("rawtypes")
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
            JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            Quantization q = (Quantization) value;
            var sd = q.getSymbolicDuration();
            label.setText(sd.getReadableName());
            // label.setIcon(NoteIcons.get20x30(sd));
            // label.setPreferredSize(new Dimension(label.getIcon().getIconWidth(), label.getIcon().getIconHeight()));
            return label;
        }
    }

}

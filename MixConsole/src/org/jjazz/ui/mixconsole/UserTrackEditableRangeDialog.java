/*
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 *  Copyright @2019 Jerome Lelasseux. All rights reserved.
 *
 *  This file is part of the JJazzLabX software.
 *   
 *  JJazzLabX is free software: you can redistribute it and/or modify
 *  it under the terms of the Lesser GNU General Public License (LGPLv3) 
 *  as published by the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *
 *  JJazzLabX is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with JJazzLabX.  If not, see <https://www.gnu.org/licenses/>
 * 
 *  Contributor(s): 
 */
package org.jjazz.ui.mixconsole;

import com.google.common.base.Preconditions;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JList;
import org.jjazz.harmony.api.TimeSignature;
import org.jjazz.song.api.Song;
import org.jjazz.ui.utilities.api.Utilities;
import org.jjazz.util.api.IntRange;
import org.openide.windows.WindowManager;

/**
 * Ask user which part of the user track to edit when song has multiple time signatures.
 */
public class UserTrackEditableRangeDialog extends javax.swing.JDialog
{

    /**
     * Text is only used for the display in the list.
     */
    public record EditableRange(String text, IntRange barRange, TimeSignature timeSignature)
            {

        @Override
        public String toString()
        {
            return text;
        }
    }

    private EditableRange editableRange;
    private final EditableRange editableRanges[];

    /**
     * Construct a dialog.
     *
     * @param song A multi-timesignature song.
     */
    public UserTrackEditableRangeDialog(Song song)
    {
        super(WindowManager.getDefault().getMainWindow(), true);


        editableRanges = computeRanges(song);
        initComponents();


        Utilities.installEnterKeyAction(this, () -> btn_okActionPerformed(null));
        Utilities.installEscapeKeyAction(this, () -> btn_cancelActionPerformed(null));
        setLocationRelativeTo(WindowManager.getDefault().getMainWindow());
    }

    /**
     * Get the user-selected editable range.
     *
     * @return Null if user cancelled.
     */
    public EditableRange getEditableRange()
    {
        return editableRange;
    }

    // ======================================================================================
    // Private methods
    // ======================================================================================
    private EditableRange[] computeRanges(Song song)
    {
        Preconditions.checkArgument(song.getSongStructure().getUniqueTimeSignatures().size() > 1, "song=%s", song);

        List<EditableRange> res = new ArrayList<>();

        var ss = song.getSongStructure();
        var spts = ss.getSongParts();
        spts.add(null);         // Add an extra to simplify loop below
        var firstSpt = spts.get(0);
        var firstSptTs = firstSpt.getRhythm().getTimeSignature();


        // Since it's multi timesignature there is at least 2 song parts.
        for (int i = 1; i < spts.size(); i++)
        {
            var spt = spts.get(i);      // Last is null!
            var ts = spt == null ? null : spt.getRhythm().getTimeSignature();
            var prevSpt = spts.get(i - 1);
            if (!firstSptTs.equals(ts))
            {
                // TimeSignature has changed, or it's the last, create an EditableRange with the previous SongParts
                var barRange = new IntRange(firstSpt.getStartBarIndex(), prevSpt.getBarRange().to);
                String text;
                if (firstSpt == prevSpt)
                {
                    // Timesignature changes after one spt
                    text = firstSptTs + " - " + firstSpt.getName();
                } else
                {
                    // At least 2 spts share the same ts
                    text = firstSptTs + " - "
                            + firstSpt.getName() + " (bar " + (firstSpt.getBarRange().from + 1) + ")"
                            + " >>> "
                            + prevSpt.getName() + " (bar " + (prevSpt.getBarRange().to + 1) + ")";
                }
                var ed = new EditableRange(text, barRange, firstSptTs);
                res.add(ed);


                // Next
                if (spt != null)
                {
                    firstSpt = spt;
                    firstSptTs = firstSpt.getRhythm().getTimeSignature();
                }
            }
        }

        return res.toArray(EditableRange[]::new);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        btn_cancel = new javax.swing.JButton();
        btn_ok = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_parts = new JList(editableRanges);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(UserTrackEditableRangeDialog.class, "UserTrackEditableRangeDialog.title")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(UserTrackEditableRangeDialog.class, "UserTrackEditableRangeDialog.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btn_cancel, org.openide.util.NbBundle.getMessage(UserTrackEditableRangeDialog.class, "UserTrackEditableRangeDialog.btn_cancel.text")); // NOI18N
        btn_cancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_cancelActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btn_ok, org.openide.util.NbBundle.getMessage(UserTrackEditableRangeDialog.class, "UserTrackEditableRangeDialog.btn_ok.text")); // NOI18N
        btn_ok.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_okActionPerformed(evt);
            }
        });

        list_parts.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list_parts.setVerifyInputWhenFocusTarget(false);
        list_parts.setVisibleRowCount(6);
        list_parts.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                list_partsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(list_parts);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_ok)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_cancel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 26, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_cancel)
                    .addComponent(btn_ok))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_okActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_okActionPerformed
    {//GEN-HEADEREND:event_btn_okActionPerformed
        editableRange = list_parts.getSelectedValue();
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btn_okActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        btn_cancelActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_cancelActionPerformed
    {//GEN-HEADEREND:event_btn_cancelActionPerformed
        editableRange = null;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btn_cancelActionPerformed

    private void list_partsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_list_partsMouseClicked
    {//GEN-HEADEREND:event_list_partsMouseClicked
        if (evt.getClickCount() == 2)
        {
            btn_okActionPerformed(null);
        }
    }//GEN-LAST:event_list_partsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancel;
    private javax.swing.JButton btn_ok;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<EditableRange> list_parts;
    // End of variables declaration//GEN-END:variables

}

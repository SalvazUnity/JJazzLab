/*
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 *  Copyright @2019 Jerome Lelasseux. All rights reserved.
 *
 *  This file is part of the JJazzLabX software.
 *   
 *  JJazzLabX is free software: you can redistribute it and/or modify
 *  it under the terms of the Lesser GNU General Public License (LGPLv3) 
 *  as published by the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *
 *  JJazzLabX is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with JJazzLabX.  If not, see <https://www.gnu.org/licenses/>
 * 
 *  Contributor(s): 
 */
package org.jjazz.options;

import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JComboBox;
import javax.swing.SpinnerListModel;
import org.jjazz.midi.MidiConst;
import org.jjazz.musiccontrol.MusicController;
import org.jjazz.musiccontrol.ClickManager;
import org.jjazz.musiccontrol.ClickManager.PrecountMode;
import org.jjazz.rhythm.api.MusicGenerationException;
import org.jjazz.rhythmmusicgeneration.NoteEvent;
import org.jjazz.rhythmmusicgeneration.Phrase;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;

final class ClickPanel extends javax.swing.JPanel
{

    private final ClickOptionsPanelController controller;

    ClickPanel(ClickOptionsPanelController controller)
    {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
     * method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        rbtn_group_precount = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lbl_lowVelocity = new javax.swing.JLabel();
        spn_velocityHigh = new org.jjazz.ui.utilities.WheelSpinner();
        spn_velocityLow = new org.jjazz.ui.utilities.WheelSpinner();
        lbl_soundHigh = new javax.swing.JLabel();
        lbl_highVelocity = new javax.swing.JLabel();
        combo_soundHigh = new JComboBox<>(MidiConst.getGMPercussions());
        spn_channel = new org.jjazz.ui.utilities.WheelSpinner();
        btn_Hear = new javax.swing.JButton();
        combo_soundLow = new JComboBox<>(MidiConst.getGMPercussions());
        lbl_soundLow = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        helpTextArea1 = new org.jjazz.ui.utilities.HelpTextArea();
        jPanel2 = new javax.swing.JPanel();
        rbtn_precount_auto = new javax.swing.JRadioButton();
        rbtn_precount2 = new javax.swing.JRadioButton();
        rbtn_precount1 = new javax.swing.JRadioButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.jPanel1.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lbl_lowVelocity, org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.lbl_lowVelocity.text")); // NOI18N
        lbl_lowVelocity.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.lbl_lowVelocity.toolTipText")); // NOI18N

        spn_velocityHigh.setModel(new javax.swing.SpinnerNumberModel(0, 0, 127, 1));
        spn_velocityHigh.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.spn_velocityHigh.toolTipText")); // NOI18N
        spn_velocityHigh.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spn_velocityHighStateChanged(evt);
            }
        });

        spn_velocityLow.setModel(new javax.swing.SpinnerNumberModel(0, 0, 127, 1));
        spn_velocityLow.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.spn_velocityLow.toolTipText")); // NOI18N
        spn_velocityLow.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spn_velocityLowStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lbl_soundHigh, org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.lbl_soundHigh.text")); // NOI18N
        lbl_soundHigh.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.lbl_soundHigh.toolTipText")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lbl_highVelocity, org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.lbl_highVelocity.text")); // NOI18N
        lbl_highVelocity.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.lbl_highVelocity.toolTipText")); // NOI18N

        combo_soundHigh.setMaximumRowCount(16);
        combo_soundHigh.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.combo_soundHigh.toolTipText")); // NOI18N
        combo_soundHigh.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                combo_soundHighActionPerformed(evt);
            }
        });

        spn_channel.setModel(new javax.swing.SpinnerNumberModel(10, 1, 16, 1));

        btn_Hear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jjazz/options/resources/Speaker-20x20.png"))); // NOI18N
        btn_Hear.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_HearActionPerformed(evt);
            }
        });

        combo_soundLow.setMaximumRowCount(16);
        combo_soundLow.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.combo_soundLow.toolTipText")); // NOI18N
        combo_soundLow.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                combo_soundLowActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lbl_soundLow, org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.lbl_soundLow.text")); // NOI18N
        lbl_soundLow.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.lbl_soundLow.toolTipText")); // NOI18N

        jScrollPane1.setBorder(null);

        helpTextArea1.setColumns(20);
        helpTextArea1.setRows(5);
        helpTextArea1.setText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.helpTextArea1.text")); // NOI18N
        jScrollPane1.setViewportView(helpTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(combo_soundLow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_soundLow))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(combo_soundHigh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_soundHigh)))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(spn_velocityLow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_lowVelocity))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(spn_velocityHigh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_highVelocity))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spn_channel, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Hear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(spn_channel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn_Hear, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_soundHigh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_soundHigh)
                    .addComponent(spn_velocityHigh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_highVelocity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_soundLow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_soundLow)
                    .addComponent(spn_velocityLow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_lowVelocity))
                .addGap(21, 21, 21))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.jPanel2.border.title"))); // NOI18N

        rbtn_group_precount.add(rbtn_precount_auto);
        org.openide.awt.Mnemonics.setLocalizedText(rbtn_precount_auto, org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.rbtn_precount_auto.text")); // NOI18N

        rbtn_group_precount.add(rbtn_precount2);
        rbtn_precount2.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(rbtn_precount2, org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.rbtn_precount2.text")); // NOI18N

        rbtn_group_precount.add(rbtn_precount1);
        org.openide.awt.Mnemonics.setLocalizedText(rbtn_precount1, org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.rbtn_precount1.text")); // NOI18N
        rbtn_precount1.setToolTipText(org.openide.util.NbBundle.getMessage(ClickPanel.class, "ClickPanel.rbtn_precount1.toolTipText")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbtn_precount2)
                    .addComponent(rbtn_precount1)
                    .addComponent(rbtn_precount_auto))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbtn_precount1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbtn_precount2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbtn_precount_auto)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void spn_velocityHighStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spn_velocityHighStateChanged
    {//GEN-HEADEREND:event_spn_velocityHighStateChanged
        controller.changed();
    }//GEN-LAST:event_spn_velocityHighStateChanged

    private void spn_velocityLowStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spn_velocityLowStateChanged
    {//GEN-HEADEREND:event_spn_velocityLowStateChanged
        controller.changed();
    }//GEN-LAST:event_spn_velocityLowStateChanged

   private void btn_HearActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_HearActionPerformed
   {//GEN-HEADEREND:event_btn_HearActionPerformed
       combo_soundHigh.setEnabled(false);
       combo_soundLow.setEnabled(false);
       btn_Hear.setEnabled(false);
       spn_channel.setEnabled(false);
       spn_velocityHigh.setEnabled(false);
       spn_velocityLow.setEnabled(false);

       Runnable endAction = new Runnable()
       {
           @Override
           public void run()
           {
               combo_soundHigh.setEnabled(true);
               combo_soundLow.setEnabled(true);
               btn_Hear.setEnabled(true);
               spn_channel.setEnabled(true);
               spn_velocityHigh.setEnabled(true);
               spn_velocityLow.setEnabled(true);
           }
       };

       // Send test notes using the parameters
       int pitchHigh = Arrays.asList(MidiConst.getGMPercussionMap()).indexOf(combo_soundHigh.getSelectedItem());
       int pitchLow = Arrays.asList(MidiConst.getGMPercussionMap()).indexOf(combo_soundLow.getSelectedItem());
       int velHigh = (int) spn_velocityHigh.getValue();
       int velLow = (int) spn_velocityLow.getValue();
       final Phrase p = new Phrase((int) spn_channel.getValue() - 1);
       int nbClicks = getPrecountMode().equals(PrecountMode.TWO_BARS) ? 8 : 4;
       for (int i = 0; i < nbClicks; i++)
       {
           int pitch = pitchLow;
           int vel = velLow;
           if (i % 4 == 0)
           {
               pitch = pitchHigh;
               vel = velHigh;
           }
           p.addOrdered(new NoteEvent(pitch, 0.25f, vel, i * 0.5f));
       }

       MusicController mc = MusicController.getInstance();
       try
       {
           mc.playTestNotes(p, endAction);
       } catch (MusicGenerationException ex)
       {
           NotifyDescriptor d = new NotifyDescriptor.Message(ex.getLocalizedMessage(), NotifyDescriptor.ERROR_MESSAGE);
           DialogDisplayer.getDefault().notify(d);
       }
   }//GEN-LAST:event_btn_HearActionPerformed

    private void combo_soundHighActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_combo_soundHighActionPerformed
    {//GEN-HEADEREND:event_combo_soundHighActionPerformed
        controller.changed();
    }//GEN-LAST:event_combo_soundHighActionPerformed

    private void combo_soundLowActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_combo_soundLowActionPerformed
    {//GEN-HEADEREND:event_combo_soundLowActionPerformed
        controller.changed();
    }//GEN-LAST:event_combo_soundLowActionPerformed

    void load()
    {
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(ClickPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(ClickPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
        combo_soundHigh.setSelectedItem(MidiConst.getGMPercussionMap()[ClickManager.getInstance().getClickPitchHigh()]);
        combo_soundLow.setSelectedItem(MidiConst.getGMPercussionMap()[ClickManager.getInstance().getClickPitchLow()]);
        spn_velocityHigh.setValue(ClickManager.getInstance().getClickVelocityHigh());
        spn_velocityLow.setValue(ClickManager.getInstance().getClickVelocityLow());
        spn_channel.setValue(ClickManager.getInstance().getPreferredClickChannel() + 1);
        setPrecountMode(ClickManager.getInstance().getClickPrecountMode());
    }

    void store()
    {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(ClickPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(ClickPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());

        int pitchHigh = Arrays.asList(MidiConst.getGMPercussionMap()).indexOf(combo_soundHigh.getSelectedItem());
        ClickManager.getInstance().setClickPitchHigh(pitchHigh);
        int pitchLow = Arrays.asList(MidiConst.getGMPercussionMap()).indexOf(combo_soundLow.getSelectedItem());
        ClickManager.getInstance().setClickPitchLow(pitchLow);
        ClickManager.getInstance().setClickVelocityHigh((int) spn_velocityHigh.getValue());
        ClickManager.getInstance().setClickVelocityLow((int) spn_velocityLow.getValue());
        ClickManager.getInstance().setPreferredClickChannel((int) spn_channel.getValue() - 1);
        ClickManager.getInstance().setClickPrecountMode(getPrecountMode());
    }

    boolean valid()
    {
        // TODO check whether form is consistent and complete
        return true;
    }

    private void setPrecountMode(PrecountMode mode)
    {
        switch (mode)
        {
            case ONE_BAR:
                rbtn_precount1.setSelected(true);
                break;
            case TWO_BARS:
                rbtn_precount2.setSelected(true);
                break;
            case AUTO:
                rbtn_precount_auto.setSelected(true);
                break;
            default:
                throw new IllegalStateException("mode=" + mode);
        }
    }

    private PrecountMode getPrecountMode()
    {
        if (rbtn_precount1.isSelected())
        {
            return PrecountMode.ONE_BAR;
        } else if (rbtn_precount2.isSelected())
        {
            return PrecountMode.TWO_BARS;
        } else
        {
            return PrecountMode.AUTO;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Hear;
    private javax.swing.JComboBox<String> combo_soundHigh;
    private javax.swing.JComboBox<String> combo_soundLow;
    private org.jjazz.ui.utilities.HelpTextArea helpTextArea1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_highVelocity;
    private javax.swing.JLabel lbl_lowVelocity;
    private javax.swing.JLabel lbl_soundHigh;
    private javax.swing.JLabel lbl_soundLow;
    private javax.swing.ButtonGroup rbtn_group_precount;
    private javax.swing.JRadioButton rbtn_precount1;
    private javax.swing.JRadioButton rbtn_precount2;
    private javax.swing.JRadioButton rbtn_precount_auto;
    private org.jjazz.ui.utilities.WheelSpinner spn_channel;
    private org.jjazz.ui.utilities.WheelSpinner spn_velocityHigh;
    private org.jjazz.ui.utilities.WheelSpinner spn_velocityLow;
    // End of variables declaration//GEN-END:variables
}

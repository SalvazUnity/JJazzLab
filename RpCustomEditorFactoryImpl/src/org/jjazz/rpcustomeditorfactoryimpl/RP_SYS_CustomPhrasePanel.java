package org.jjazz.rpcustomeditorfactoryimpl;

import org.jjazz.rpcustomeditorfactoryimpl.spi.RealTimeRpEditorPanel;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import org.jjazz.rhythm.api.rhythmparameters.RP_SYS_CustomPhrase;
import org.jjazz.rhythm.api.rhythmparameters.RP_SYS_CustomPhraseValue;
import org.jjazz.songcontext.api.SongContext;
import org.jjazz.util.api.ResUtil;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;


/**
 * An editor panel for RP_SYS_CustomPhrase.
 */
public class RP_SYS_CustomPhrasePanel extends RealTimeRpEditorPanel<RP_SYS_CustomPhraseValue> implements PropertyChangeListener
{

    private RP_SYS_CustomPhrase rp;
    private RP_SYS_CustomPhraseValue lastValue;
    private SongContext songContext;

    public RP_SYS_CustomPhrasePanel(RP_SYS_CustomPhrase rp)
    {
        this.rp = rp;
        initComponents();

    }

    @Override
    public RP_SYS_CustomPhrase getRhythmParameter()
    {
        return rp;
    }

    @Override
    public void setEnabled(boolean b)
    {
        super.setEnabled(b);

        
    }

    @Override
    public void preset(RP_SYS_CustomPhraseValue rpValue, SongContext sgContext)
    {
        setEditedRpValue(rpValue);
        songContext = sgContext;


        String strChannel = "Channel drums";
        if (songContext != null)
        {
            // Check muted drums
            var rvDrums = rp.getRhythmVoice();
            String msg = null;
            if (songContext.getMidiMix().getInstrumentMixFromKey(rvDrums).isMute())
            {
                msg = ResUtil.getString(getClass(), "ERR_DrumsTrackIsMuted");
                NotifyDescriptor d = new NotifyDescriptor.Message(msg, NotifyDescriptor.ERROR_MESSAGE);
                DialogDisplayer.getDefault().notify(d);
            }


            // Update channel label
            int channel = sgContext.getMidiMix().getChannel(rvDrums);
            strChannel = "Channel " + (channel + 1);
            if (!rvDrums.getName().trim().equalsIgnoreCase("drums"))
            {
                strChannel += " (" + rvDrums.getName().trim() + ")";
            }
        }

        lbl_channel.setText(strChannel);
    }

    @Override
    public void setEditedRpValue(RP_SYS_CustomPhraseValue rpValue)
    {

        lastValue = rpValue;
    }

    @Override
    public RP_SYS_CustomPhraseValue getEditedRpValue()
    {
        
        return res;
    }

    @Override
    public void cleanup()
    {
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt)
    {
        if ()             
        {
            if (evt.getPropertyName().equals(FlatIntegerKnob.PROP_VALUE))
            {
                var newValue = getEditedRpValue();
                firePropertyChange(PROP_EDITED_RP_VALUE, lastValue, newValue);
                lastValue = newValue;
            }
        }
    }

    // ===================================================================================
    // Private methods
    // ===================================================================================

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();

        setToolTipText(org.openide.util.NbBundle.getMessage(RP_SYS_CustomPhrasePanel.class, "RP_SYS_CustomPhrasePanel.toolTipText")); // NOI18N

        jList1.setModel(new javax.swing.AbstractListModel<String>()
        {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(RP_SYS_CustomPhrasePanel.class, "RP_SYS_CustomPhrasePanel.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(336, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables


}

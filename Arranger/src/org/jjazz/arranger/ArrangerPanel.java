/*
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 *  Copyright @2019 Jerome Lelasseux. All rights reserved.
 *
 *  This file is part of the JJazzLabX software.
 *   
 *  JJazzLabX is free software: you can redistribute it and/or modify
 *  it under the terms of the Lesser GNU General Public License (LGPLv3) 
 *  as published by the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *
 *  JJazzLabX is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with JJazzLabX.  If not, see <https://www.gnu.org/licenses/>
 * 
 *  Contributor(s): 
 */
package org.jjazz.arranger;

import java.awt.Font;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.sound.midi.MidiMessage;
import javax.sound.midi.Receiver;
import javax.sound.midi.ShortMessage;
import javax.sound.midi.Transmitter;
import org.jjazz.activesong.api.ActiveSongManager;
import org.jjazz.harmony.api.ChordSymbol;
import org.jjazz.midi.api.JJazzMidiSystem;
import org.jjazz.midi.api.MidiUtilities;
import org.jjazz.midimix.api.MidiMix;
import org.jjazz.rhythm.api.MusicGenerationException;
import org.jjazz.song.api.Song;
import org.jjazz.songcontext.api.SongContext;
import org.jjazz.ui.keyboardcomponent.api.KeyboardComponent;
import org.jjazz.ui.keyboardcomponent.api.KeyboardRange;
import org.jjazz.uisettings.api.GeneralUISettings;
import org.openide.util.Exceptions;

/**
 *
 * @author Jerome
 */
public class ArrangerPanel extends javax.swing.JPanel implements PropertyChangeListener
{

    private Font chordSymbolFont;
    private ArrangerController controller;
    private Transmitter transmitter;
    private Arranger arranger;
    private Song song;
    private MidiMix midiMix;

    /**
     * Creates new form ArrangerPanel
     */
    public ArrangerPanel(ArrangerController controller)
    {
        // Used by initComponents
        chordSymbolFont = GeneralUISettings.getInstance().getStdCondensedFont().deriveFont(Font.BOLD, 16f);
        initComponents();

        this.controller = controller;

    }

    public void closing()
    {
        if (transmitter != null)
        {
            transmitter.close();
        }
    }

    public void opened()
    {
        if (transmitter != null)
        {
            transmitter.close();
        }
        transmitter = JJazzMidiSystem.getInstance().getJJazzMidiInDevice().getTransmitter();
        transmitter.setReceiver(new PianoReceiver());
    }

    @Override
    public void setEnabled(boolean b)
    {
        super.setEnabled(b);
        lbl_chordSymbol.setEnabled(b);
        lbl_rhythm.setEnabled(b);
        lbl_songPart.setEnabled(b);
        kbdComponent.setEnabled(b);
    }


    // ================================================================================    
    // Private methods
    // ================================================================================    
    private void togglePlayPause()
    {
        if (tbtn_playPause.isSelected())
        {
            if (arranger != null)
            {
                arranger.removePropertyListener(this);
                arranger.cleanup();
            }

            Song activeSong = ActiveSongManager.getInstance().getActiveSong();
            MidiMix mm = ActiveSongManager.getInstance().getActiveMidiMix();
            assert activeSong != null && mm != null : "activeSong=" + activeSong + " mm=" + mm;
            SongContext sgContext = new SongContext(activeSong, mm);
            arranger = new Arranger(sgContext);
            arranger.addPropertyListener(this);
            try
            {
                arranger.play();
            } catch (MusicGenerationException ex)
            {
                Exceptions.printStackTrace(ex);
            }
        } else
        {
            arranger.stop();
        }
    }

    /**
     *
     * @param sg Can be null
     * @param mm Can be null
     */
    private void activeSongChanged(Song sg, MidiMix mm)
    {
        if (sg != null && mm != null)
        {

            song = sg;
            midiMix = mm;

        }
    }


    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        kbdComponent = new KeyboardComponent(KeyboardRange._49_KEYS);
        lbl_chordSymbol = new javax.swing.JLabel();
        lbl_songPart = new javax.swing.JLabel();
        lbl_rhythm = new javax.swing.JLabel();
        tbtn_playPause = new org.jjazz.ui.flatcomponents.api.FlatToggleButton();
        fbtn_previous = new org.jjazz.ui.flatcomponents.api.FlatButton();
        fbtn_next = new org.jjazz.ui.flatcomponents.api.FlatButton();

        kbdComponent.setPreferredSize(new java.awt.Dimension(300, 60));

        lbl_chordSymbol.setFont(chordSymbolFont);
        lbl_chordSymbol.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(lbl_chordSymbol, "Bb7M"); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lbl_songPart, org.openide.util.NbBundle.getMessage(ArrangerPanel.class, "ArrangerPanel.lbl_songPart.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lbl_rhythm, org.openide.util.NbBundle.getMessage(ArrangerPanel.class, "ArrangerPanel.lbl_rhythm.text")); // NOI18N

        tbtn_playPause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jjazz/arranger/resources/PlayPause.png"))); // NOI18N
        tbtn_playPause.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jjazz/arranger/resources/PlayPause-ON.png"))); // NOI18N
        tbtn_playPause.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                tbtn_playPauseActionPerformed(evt);
            }
        });

        fbtn_previous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jjazz/arranger/resources/Previous.png"))); // NOI18N

        fbtn_next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jjazz/arranger/resources/Next.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_chordSymbol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_songPart)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(fbtn_previous, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(tbtn_playPause, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(fbtn_next, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addComponent(kbdComponent, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_rhythm)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_songPart)
                    .addComponent(fbtn_next, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tbtn_playPause, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fbtn_previous, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lbl_chordSymbol)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(kbdComponent, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_rhythm)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tbtn_playPauseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_tbtn_playPauseActionPerformed
    {//GEN-HEADEREND:event_tbtn_playPauseActionPerformed
        togglePlayPause();
    }//GEN-LAST:event_tbtn_playPauseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jjazz.ui.flatcomponents.api.FlatButton fbtn_next;
    private org.jjazz.ui.flatcomponents.api.FlatButton fbtn_previous;
    private org.jjazz.ui.keyboardcomponent.api.KeyboardComponent kbdComponent;
    private javax.swing.JLabel lbl_chordSymbol;
    private javax.swing.JLabel lbl_rhythm;
    private javax.swing.JLabel lbl_songPart;
    private org.jjazz.ui.flatcomponents.api.FlatToggleButton tbtn_playPause;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt)
    {
        if (evt.getSource() == arranger)
        {
            if (evt.getPropertyName().equals(Arranger.PROP_CHORD_SYMBOL))
            {
                ChordSymbol cs = (ChordSymbol) evt.getNewValue();
                lbl_chordSymbol.setText(cs.getName());
                
            } else if (evt.getPropertyName().equals(Arranger.PROP_PLAYING))
            {

            }
        }
    }


    // ================================================================================    
    // Private classes
    // ================================================================================ 
    private class PianoReceiver implements Receiver
    {

        @Override
        public void send(MidiMessage msg, long timeStamp)
        {
            if (!ArrangerPanel.this.isShowing())        // But might be showing AND hidden behind another TopComponent
            {
                return;
            }

            ShortMessage noteMsg = MidiUtilities.getNoteOnMidiEvent(msg);
            if (noteMsg != null)
            {
                // Note ON
                int pitch = noteMsg.getData1();
                int velocity = noteMsg.getData2();

                kbdComponent.setPressed(pitch, velocity, null);

            } else if ((noteMsg = MidiUtilities.getNoteOffMidiEvent(msg)) != null)
            {
                // Note OFF
                int pitch = noteMsg.getData1();
                kbdComponent.setReleased(pitch);
            }
        }

        @Override
        public void close()
        {
            // Nothing
        }

    }
}

/*
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 *  Copyright @2019 Jerome Lelasseux. All rights reserved.
 *
 *  This file is part of the JJazzLab software.
 *   
 *  JJazzLab is free software: you can redistribute it and/or modify
 *  it under the terms of the Lesser GNU General Public License (LGPLv3) 
 *  as published by the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *
 *  JJazzLab is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with JJazzLab.  If not, see <https://www.gnu.org/licenses/>
 * 
 *  Contributor(s): 
 */
package org.jjazz.importers;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JRootPane;
import javax.swing.KeyStroke;
import org.jjazz.song.spi.SongImporter;

/**
 * A simple dialog to select which SongImporter to use.
 */
public class ChooseImporterDialog extends javax.swing.JDialog
{

    private SongImporter selectedImporter = null;

    /**
     * Creates new form ChooseImporterDialog
     */
    public ChooseImporterDialog(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();
        list_importers.setCellRenderer(new CellRenderer());
    }

    public void preset(String fileExtension, List<SongImporter> importers)
    {
        if (fileExtension == null || fileExtension.isEmpty() || importers == null || importers.size() < 2)
        {
            throw new IllegalArgumentException("fileExtension=" + fileExtension + " importers=" + importers);   
        }
        list_importers.setListData(importers.toArray(new SongImporter[0]));
        list_importers.setSelectedIndex(0);
        btn_Select.setEnabled(true);
        lbl_fileExtension.setText("." + fileExtension);
        pack();
    }

    /**
     * The selected importer, or null.
     *
     * @return
     */
    public SongImporter getSelectedImporter()
    {
        return this.selectedImporter;
    }

    /**
     * Overridden to add global key bindings
     *
     * @return
     */
    @Override
    protected JRootPane createRootPane()
    {
        JRootPane contentPane = new JRootPane();
        contentPane.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("ENTER"), "actionOk");   
        contentPane.getActionMap().put("actionOk", new AbstractAction("OK")
        {

            @Override
            public void actionPerformed(ActionEvent e)
            {
                btn_SelectActionPerformed(null);
            }
        });

        contentPane.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("ESCAPE"), "actionCancel");   
        contentPane.getActionMap().put("actionCancel", new AbstractAction("Cancel")
        {

            @Override
            public void actionPerformed(ActionEvent e)
            {
                btn_CancelActionPerformed(null);
            }
        });
        return contentPane;
    }

    private class CellRenderer extends DefaultListCellRenderer
    {

        @Override
        @SuppressWarnings("rawtypes")
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
            JComponent jc = (JComponent) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            SongImporter importer = (SongImporter) value;
            setText(importer.getId());
            return jc;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        lbl_fileExtension = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list_importers = new javax.swing.JList<>();
        btn_Cancel = new javax.swing.JButton();
        btn_Select = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(ChooseImporterDialog.class, "ChooseImporterDialog.title")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ChooseImporterDialog.class, "ChooseImporterDialog.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lbl_fileExtension, "jLabel2"); // NOI18N

        list_importers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list_importers.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                list_importersValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(list_importers);

        org.openide.awt.Mnemonics.setLocalizedText(btn_Cancel, org.openide.util.NbBundle.getMessage(ChooseImporterDialog.class, "ChooseImporterDialog.btn_Cancel.text")); // NOI18N
        btn_Cancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_CancelActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btn_Select, org.openide.util.NbBundle.getMessage(ChooseImporterDialog.class, "ChooseImporterDialog.btn_Select.text")); // NOI18N
        btn_Select.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_SelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_Select)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_Cancel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_fileExtension)
                        .addGap(0, 40, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btn_Cancel, btn_Select});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lbl_fileExtension))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Cancel)
                    .addComponent(btn_Select))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_SelectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_SelectActionPerformed
    {//GEN-HEADEREND:event_btn_SelectActionPerformed
        if (selectedImporter == null)
        {
            return;
        }
        setVisible(false);
    }//GEN-LAST:event_btn_SelectActionPerformed

    private void btn_CancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_CancelActionPerformed
    {//GEN-HEADEREND:event_btn_CancelActionPerformed
        selectedImporter = null;
        setVisible(false);
    }//GEN-LAST:event_btn_CancelActionPerformed

    private void list_importersValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_list_importersValueChanged
    {//GEN-HEADEREND:event_list_importersValueChanged
        if (evt.getValueIsAdjusting())
        {
            return;
        }
        selectedImporter = this.list_importers.getSelectedValue();
        btn_Select.setEnabled(selectedImporter != null);
    }//GEN-LAST:event_list_importersValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Cancel;
    private javax.swing.JButton btn_Select;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_fileExtension;
    private javax.swing.JList<SongImporter> list_importers;
    // End of variables declaration//GEN-END:variables
}

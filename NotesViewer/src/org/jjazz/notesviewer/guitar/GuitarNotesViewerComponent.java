/*
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 *  Copyright @2019 Jerome Lelasseux. All rights reserved.
 *
 *  This file is part of the JJazzLabX software.
 *   
 *  JJazzLabX is free software: you can redistribute it and/or modify
 *  it under the terms of the Lesser GNU General Public License (LGPLv3) 
 *  as published by the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *
 *  JJazzLabX is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with JJazzLabX.  If not, see <https://www.gnu.org/licenses/>
 * 
 *  Contributor(s): 
 */
package org.jjazz.notesviewer.guitar;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.JLabel;
import org.jjazz.harmony.api.ChordSymbol;
import org.jjazz.leadsheet.chordleadsheet.api.item.CLI_ChordSymbol;
import org.jjazz.notesviewer.spi.NotesViewer;
import org.jjazz.ui.guitardiagramcomponent.api.GuitarDiagramComponent;
import org.jjazz.ui.guitardiagramcomponent.api.TGChord;
import org.jjazz.ui.guitardiagramcomponent.api.TGChordCreatorUtil;
import org.jjazz.ui.guitardiagramcomponent.api.TGChordSettings;
import org.jjazz.ui.guitardiagramcomponent.api.TGChordSettings.ChordMode;

public class GuitarNotesViewerComponent extends javax.swing.JPanel
{


    private static final Color TONIC_NOTE_COLOR = new Color(231, 83, 35);
    private final GuitarNotesViewer notesViewer;
    private ChordSymbol lastChordSymbol;
    private final int maxFretSpan = 4;
    private static final Logger LOGGER = Logger.getLogger(GuitarNotesViewerComponent.class.getSimpleName());

    /**
     * Creates new form PianoViewerComponent
     */
    public GuitarNotesViewerComponent(GuitarNotesViewer viewer)
    {
        notesViewer = viewer;
        initComponents();

        fbtn_chordMode.setText(TGChordSettings.getInstance().getChordMode().toString());
    }

    public void clear()
    {
        pnl_instrument.removeAll();
        revalidate();
        repaint();
    }

    public void setMode(NotesViewer.Mode mode)
    {
        switch (mode)
        {
            case ShowBackingTrack:
                pnl_instrument.removeAll();
                pnl_instrument.add(new JLabel("Not supported"));
                break;
            case ShowSelection:
                clear();
                break;
            default:
                throw new AssertionError(mode.name());

        }
    }

    public void showDiagrams(CLI_ChordSymbol cliCs)
    {
        updateDiagrams(cliCs.getData());
    }

    @Override
    public void setEnabled(boolean b
    )
    {
        super.setEnabled(b);
        for (GuitarDiagramComponent diagram : getDiagrams())
        {
            diagram.setEnabled(false);
        }
    }
    // ===============================================================================
    // Private methods
    // ===============================================================================

    private void updateDiagrams(ChordSymbol cs)
    {
        lastChordSymbol = cs;

        pnl_instrument.removeAll();
        List<TGChord> tgChords = new TGChordCreatorUtil(maxFretSpan).getChords(cs);
        tgChords.stream().limit(30).forEach(tgChord ->
        {
            GuitarDiagramComponent diagram = new GuitarDiagramComponent(tgChord, cs);
            diagram.setTonicNoteColor(TONIC_NOTE_COLOR);
            pnl_instrument.add(diagram);
        }
        );

        revalidate();
        repaint();

    }

    private List<GuitarDiagramComponent> getDiagrams()
    {
        var res = new ArrayList<GuitarDiagramComponent>();
        for (Component c : pnl_instrument.getComponents())
        {
            if (c instanceof GuitarDiagramComponent)
            {
                res.add((GuitarDiagramComponent) c);
            }
        }
        return res;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        pnl_instrument = new javax.swing.JPanel();
        fbtn_chordMode = new org.jjazz.ui.utilities.api.SmallFlatDarkLafButton();

        pnl_instrument.setLayout(new java.awt.GridLayout(0, 2, 5, 5));
        jScrollPane1.setViewportView(pnl_instrument);

        org.openide.awt.Mnemonics.setLocalizedText(fbtn_chordMode, "Most common chords"); // NOI18N
        fbtn_chordMode.setToolTipText(org.openide.util.NbBundle.getMessage(GuitarNotesViewerComponent.class, "GuitarNotesViewerComponent.fbtn_chordMode.toolTipText")); // NOI18N
        fbtn_chordMode.setFont(fbtn_chordMode.getFont().deriveFont(fbtn_chordMode.getFont().getSize()-2f));
        fbtn_chordMode.setMargin(new java.awt.Insets(2, 5, 2, 5));
        fbtn_chordMode.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                fbtn_chordModeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addComponent(fbtn_chordMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(fbtn_chordMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fbtn_chordModeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fbtn_chordModeActionPerformed
    {//GEN-HEADEREND:event_fbtn_chordModeActionPerformed
        var tgs = TGChordSettings.getInstance();
        ChordMode mode = tgs.getChordMode().next();
        TGChordSettings.getInstance().setChordMode(mode);
        updateDiagrams(lastChordSymbol);
        fbtn_chordMode.setText(mode.toString());
    }//GEN-LAST:event_fbtn_chordModeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jjazz.ui.utilities.api.SmallFlatDarkLafButton fbtn_chordMode;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnl_instrument;
    // End of variables declaration//GEN-END:variables
}

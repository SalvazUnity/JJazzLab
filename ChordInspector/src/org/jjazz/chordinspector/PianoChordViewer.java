/*
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 *  Copyright @2019 Jerome Lelasseux. All rights reserved.
 *
 *  This file is part of the JJazzLabX software.
 *   
 *  JJazzLabX is free software: you can redistribute it and/or modify
 *  it under the terms of the Lesser GNU General Public License (LGPLv3) 
 *  as published by the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *
 *  JJazzLabX is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with JJazzLabX.  If not, see <https://www.gnu.org/licenses/>
 * 
 *  Contributor(s): 
 */
package org.jjazz.chordinspector;

import java.awt.Color;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import org.jjazz.chordinspector.spi.ChordViewer;
import org.jjazz.harmony.api.Note;
import org.jjazz.leadsheet.chordleadsheet.api.item.CLI_ChordSymbol;
import org.jjazz.leadsheet.chordleadsheet.api.item.ExtChordSymbol;
import org.jjazz.midimix.api.MidiMix;
import org.jjazz.rhythm.api.RhythmVoice;
import org.jjazz.song.api.Song;
import org.jjazz.ui.keyboardcomponent.api.KeyboardComponent;
import org.jjazz.ui.keyboardcomponent.api.KeyboardRange;
import org.jjazz.ui.keyboardcomponent.api.PianoKey;
import org.netbeans.api.annotations.common.StaticResource;
import org.openide.util.lookup.ServiceProvider;

/**
 * A ChordViewer based on a keyboard.
 */
@ServiceProvider(service = ChordViewer.class, position = 200)
public class PianoChordViewer extends javax.swing.JPanel implements ChordViewer
{

    @StaticResource(relative = true)
    final private static String ICON_PATH = "resources/KeyboardIcon.png";
    final private static Icon ICON = new ImageIcon(PianoChordViewer.class.getResource(ICON_PATH));
    private static final Color CHORD_COLOR = new Color(0, 128, 192);
    private static final Color SCALE_COLOR = new Color(187, 187, 187);

    private CLI_ChordSymbol model;

    /**
     * Creates new form PianoChordViewer
     */
    public PianoChordViewer()
    {
        initComponents();
    }


    // ===================================================================================
    // ChordViewer interface
    // ===================================================================================
    @Override
    public JComponent getComponent()
    {
        return this;
    }

    @Override
    public String getDescription()
    {
        return "Piano";
    }

    @Override
    public Icon getIcon()
    {
        return ICON;
    }

    @Override
    public void setContext(Song song, MidiMix midiMix, RhythmVoice rv)
    {
        // Nothing
    }

    @Override
    public void setModel(CLI_ChordSymbol cliCs)
    {
        this.model = cliCs;
        updateKeyboardUI();
    }

    @Override
    public CLI_ChordSymbol getModel()
    {
        return model;
    }

    @Override
    public void setEnabled(boolean b)
    {
        super.setEnabled(b);
        // To do
    }

    @Override
    public void cleanup()
    {
        // Nothing
    }

    // ===================================================================================
    // Private methods
    // ===================================================================================

    private void updateKeyboardUI()
    {
        keyboard.reset();
        if (model == null)
        {
            return;
        }


        // Chord notes
        ExtChordSymbol ecs = model.getData();
        int cPitch = keyboard.getRange().getCentralC();
        if (ecs.getRootNote().getRelativePitch() > 7)
        {
            cPitch -= 12;
        }
        for (Note n : ecs.getChord().getNotes())
        {
            keyboard.setPressed(cPitch + n.getPitch(), 127, CHORD_COLOR);
        }


        // Scale
        var ssi = ecs.getRenderingInfo().getScaleInstance();
        if (ssi != null)
        {
            var scaleRelPitches = ssi.getRelativePitches();
            for (PianoKey key : keyboard.getAllKeys())
            {
                if (scaleRelPitches.contains(key.getPitch() % 12))
                {
                    key.setMarked(SCALE_COLOR);
                }
            }
        }
    }


    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this
     * method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        keyboard = new KeyboardComponent(KeyboardRange._37_KEYS);

        setLayout(new java.awt.GridBagLayout());
        add(keyboard, new java.awt.GridBagConstraints());
    }// </editor-fold>//GEN-END:initComponents



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jjazz.ui.keyboardcomponent.api.KeyboardComponent keyboard;
    // End of variables declaration//GEN-END:variables
}

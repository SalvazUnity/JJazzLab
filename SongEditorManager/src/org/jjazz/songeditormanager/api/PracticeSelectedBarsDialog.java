/*
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 *  Copyright @2019 Jerome Lelasseux. All rights reserved.
 *
 *  This file is part of the JJazzLabX software.
 *   
 *  JJazzLabX is free software: you can redistribute it and/or modify
 *  it under the terms of the Lesser GNU General Public License (LGPLv3) 
 *  as published by the Free Software Foundation, either version 3 of the License, 
 *  or (at your option) any later version.
 *
 *  JJazzLabX is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 *  GNU Lesser General Public License for more details.
 * 
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with JJazzLabX.  If not, see <https://www.gnu.org/licenses/>
 * 
 *  Contributor(s): 
 */
package org.jjazz.songeditormanager.api;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkNotNull;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.LayoutManager;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import org.jjazz.rhythm.api.TempoRange;
import org.jjazz.ui.utilities.api.Utilities;
import org.openide.windows.WindowManager;

/**
 * Dialog to adjust the parameters of the practice song.
 */
public class PracticeSelectedBarsDialog extends javax.swing.JDialog
{

    private final static Color COLUMN_COLOR = Color.MAGENTA;
    private final static Color START_END_TEMPO_LABEL_COLOR = Color.WHITE;
    private Config result;
    private Config model;
    private final ConfigPanel configPanel;
    private static final Logger LOGGER = Logger.getLogger(PracticeSelectedBarsDialog.class.getSimpleName());

    /**
     * Creates new form PracticeSelectedBarsDialog.
     *
     * @param defaultValue Can't be null
     */
    public PracticeSelectedBarsDialog(Config defaultValue)
    {
        super(WindowManager.getDefault().getMainWindow(), true);
        checkNotNull(defaultValue);
        initComponents();

        setLocationRelativeTo(WindowManager.getDefault().getMainWindow());
        Utilities.installEnterKeyAction(this, () -> btn_CreateActionPerformed(null));
        Utilities.installEscapeKeyAction(this, () -> btn_CancelActionPerformed(null));


        model = new Config(defaultValue.tempoStart, defaultValue.tempoEnd, defaultValue.nbSteps);
        configPanel = new ConfigPanel(model);
        configPanelContainer.add(configPanel);

        lbl_nbSteps.setText(String.valueOf(model.nbSteps));
        slider_nbSteps.setValue(model.nbSteps);

        pack();
    }

    /**
     * The resulting parameters if user exited with OK, null otherwise.
     *
     * @return Can be null
     */
    public Config getResult()
    {
        return result;
    }


    // =========================================================================
    // Private methods
    // =========================================================================    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
     * this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btn_Create = new javax.swing.JButton();
        btn_Cancel = new javax.swing.JButton();
        lbl_help = new javax.swing.JLabel();
        configPanelContainer = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lbl_nbSteps = new javax.swing.JLabel();
        slider_nbSteps = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(PracticeSelectedBarsDialog.class, "PracticeSelectedBarsDialog.title")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btn_Create, org.openide.util.NbBundle.getMessage(PracticeSelectedBarsDialog.class, "PracticeSelectedBarsDialog.btn_Create.text")); // NOI18N
        btn_Create.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_CreateActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btn_Cancel, org.openide.util.NbBundle.getMessage(PracticeSelectedBarsDialog.class, "PracticeSelectedBarsDialog.btn_Cancel.text")); // NOI18N
        btn_Cancel.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btn_CancelActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lbl_help, org.openide.util.NbBundle.getMessage(PracticeSelectedBarsDialog.class, "PracticeSelectedBarsDialog.lbl_help.text")); // NOI18N

        configPanelContainer.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        configPanelContainer.setOpaque(false);
        configPanelContainer.setLayout(new java.awt.CardLayout());

        org.openide.awt.Mnemonics.setLocalizedText(lbl_nbSteps, org.openide.util.NbBundle.getMessage(PracticeSelectedBarsDialog.class, "PracticeSelectedBarsDialog.lbl_nbSteps.text")); // NOI18N
        lbl_nbSteps.setToolTipText(slider_nbSteps.getToolTipText());
        jPanel1.add(lbl_nbSteps);

        slider_nbSteps.setMajorTickSpacing(1);
        slider_nbSteps.setMaximum(20);
        slider_nbSteps.setMinimum(2);
        slider_nbSteps.setPaintTicks(true);
        slider_nbSteps.setSnapToTicks(true);
        slider_nbSteps.setToolTipText(org.openide.util.NbBundle.getMessage(PracticeSelectedBarsDialog.class, "PracticeSelectedBarsDialog.slider_nbSteps.toolTipText")); // NOI18N
        slider_nbSteps.setValue(6);
        slider_nbSteps.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                slider_nbStepsStateChanged(evt);
            }
        });
        jPanel1.add(slider_nbSteps);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(configPanelContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_Create)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Cancel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_help)
                        .addGap(0, 121, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_Cancel)
                            .addComponent(btn_Create)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_help)
                        .addGap(18, 18, 18)
                        .addComponent(configPanelContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_CreateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_CreateActionPerformed
    {//GEN-HEADEREND:event_btn_CreateActionPerformed
        result = model;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btn_CreateActionPerformed

    private void btn_CancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btn_CancelActionPerformed
    {//GEN-HEADEREND:event_btn_CancelActionPerformed
        result = null;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btn_CancelActionPerformed

    private void slider_nbStepsStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_slider_nbStepsStateChanged
    {//GEN-HEADEREND:event_slider_nbStepsStateChanged
        if (slider_nbSteps.getValueIsAdjusting())
        {
            return;
        }
        model.nbSteps = slider_nbSteps.getValue();
        lbl_nbSteps.setText(String.valueOf(model.nbSteps));
        configPanel.revalidate();
        configPanel.repaint();
    }//GEN-LAST:event_slider_nbStepsStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Cancel;
    private javax.swing.JButton btn_Create;
    private javax.swing.JPanel configPanelContainer;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbl_help;
    private javax.swing.JLabel lbl_nbSteps;
    private javax.swing.JSlider slider_nbSteps;
    // End of variables declaration//GEN-END:variables


    // =========================================================================
    // Inner classes
    // =========================================================================    
    static public class Config
    {

        public int tempoStart, tempoEnd;
        public int nbSteps;

        public Config(int tempoStart, int tempoEnd, int nbSteps)
        {
            checkArgument(nbSteps >= 2, "nbSteps=%s", nbSteps);
            this.tempoStart = tempoStart;
            this.tempoEnd = tempoEnd;
            this.nbSteps = nbSteps;
        }

        @Override
        public Config clone()
        {
            return new Config(tempoStart, tempoEnd, nbSteps);
        }

        /**
         * Calculate the tempo for stepIndex.
         * <p>
         * If stepIndex==0 then return tempoStart, if stepIndex==nbSteps-1 then return tempoEnd, else do interpolation.
         *
         * @param stepIndex
         * @return
         */
        public int getTempo(int stepIndex)
        {
            checkArgument(stepIndex >= 0 && stepIndex < nbSteps, "stepIndex=%s nbSteps=%s", stepIndex, nbSteps);
            float tempoStep = ((float) tempoEnd - tempoStart) / (nbSteps - 1);
            if (stepIndex == 0)
            {
                return tempoStart;
            } else if (stepIndex == nbSteps - 1)
            {
                return tempoEnd;
            }
            return Math.round(tempoStart + stepIndex * tempoStep);
        }

    }

    /**
     * A graphical component to visualize the start/end tempo and the intermediate steps, and to easily change the start/end
     * tempo.
     */
    static private class ConfigPanel extends JPanel
    {


        private final static int H_GAP = 10;
        private final static int V_GAP = 3;
        private final Config model;
        JLabel labelStart = new JLabel();
        JLabel labelEnd = new JLabel();
        MyMouseListener mouseListener = new MyMouseListener();


        public ConfigPanel(Config config)
        {
            checkNotNull(config);
            model = config;

            setLayout(new MyLayoutManager());

            // prepare the tempo labels
            labelStart.setForeground(START_END_TEMPO_LABEL_COLOR);
            labelEnd.setForeground(START_END_TEMPO_LABEL_COLOR);
            labelStart.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
            labelEnd.setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
            add(labelStart);
            add(labelEnd);

            labelStart.addMouseMotionListener(mouseListener);
            labelStart.addMouseWheelListener(mouseListener);
            labelEnd.addMouseMotionListener(mouseListener);
            labelEnd.addMouseWheelListener(mouseListener);

        }

        @Override
        public void paintComponent(Graphics g)
        {
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g;

            Rectangle r = Utilities.getUsableArea(this);
            int colWidth = computeColWidth(r.width);
            int maxColHeight = computeMaxColHeight(r);
            float tempo2HeightRatio = (float) maxColHeight / computeMaxTempo();


            // Draw a column for each step
            g2.setColor(COLUMN_COLOR);
            int x = r.x + H_GAP;
            int y;
            for (int i = 0; i < model.nbSteps; i++)
            {
                int colTempo = model.getTempo(i);
                int colHeight = Math.round(tempo2HeightRatio * colTempo);
                y = r.y + V_GAP + maxColHeight - colHeight;
                g2.fillRect(x, y, colWidth, colHeight);

                x += colWidth + H_GAP;
            }

        }

        private int computeMaxColHeight(Rectangle r)
        {
            int maxColHeight = r.height - 2 * V_GAP;
            return maxColHeight;
        }

        private int computeColWidth(int availableWidth)
        {
            int colWidth = (availableWidth - 2 * H_GAP - (model.nbSteps - 1) * H_GAP) / model.nbSteps;
            return colWidth;
        }

        private int computeMaxTempo()
        {
            return Math.round(Math.max(model.tempoEnd, model.tempoStart) * 1.1f);
        }

        private void setLabelTempo(JLabel lbl, int tempo)
        {
            lbl.setText(" " + tempo + " ");
        }

        private class MyMouseListener extends MouseAdapter
        {

            private boolean dragging = false;
            private int saveStartDragY;

            @Override
            public void mouseWheelMoved(MouseWheelEvent e)
            {
                if (e.getSource() == labelStart)
                {
                    if (e.getWheelRotation() > 0)
                    {
                        model.tempoStart = Math.max(TempoRange.TEMPO_MIN, model.tempoStart - 1);
                    } else
                    {
                        model.tempoStart = Math.min(TempoRange.TEMPO_MAX, model.tempoStart + 1);
                    }
                } else
                {
                    if (e.getWheelRotation() > 0)
                    {
                        model.tempoEnd = Math.max(TempoRange.TEMPO_MIN, model.tempoEnd - 1);
                    } else
                    {
                        model.tempoEnd = Math.min(TempoRange.TEMPO_MAX, model.tempoEnd + 1);
                    }
                }
                ConfigPanel.this.revalidate();
                ConfigPanel.this.repaint();
            }

            @Override
            public void mousePressed(MouseEvent e)
            {
                saveStartDragY = e.getYOnScreen();
            }

            @Override
            public void mouseDragged(MouseEvent e)
            {
                if (e.getSource() == labelStart)
                {
                    int y = e.getYOnScreen();
                    int delta = y - saveStartDragY;
                    Rectangle r = Utilities.getUsableArea(ConfigPanel.this);
                    int colWidth = computeColWidth(r.width);
                    int maxColHeight = computeMaxColHeight(r);
                    float tempo2HeightRatio = (float) maxColHeight / computeMaxTempo();

                }
            }


            @Override
            public void mouseReleased(MouseEvent e)
            {
            }
        }


        /**
         * Layout places the 2 labels.
         */
        private class MyLayoutManager implements LayoutManager
        {

            @Override
            public void layoutContainer(Container parent)
            {
                Rectangle r = Utilities.getUsableArea((JComponent) parent);
                int colWidth = computeColWidth(r.width);
                int maxColHeight = computeMaxColHeight(r);
                float tempo2HeightRatio = (float) maxColHeight / computeMaxTempo();


                // Label start
                setLabelTempo(labelStart, model.tempoStart);
                Dimension lSize = labelStart.getPreferredSize();
                labelStart.setSize(lSize);
                int colTempo = model.getTempo(0);
                int colHeight = Math.round(tempo2HeightRatio * colTempo);
                int x = r.x + H_GAP + colWidth / 2 - lSize.width / 2;
                int y = r.y + V_GAP + maxColHeight - colHeight + 3;
                labelStart.setLocation(x, y);


                // Label end
                setLabelTempo(labelEnd, model.tempoEnd);
                lSize = labelEnd.getPreferredSize();
                labelEnd.setSize(lSize);
                colTempo = model.getTempo(model.nbSteps - 1);
                colHeight = Math.round(tempo2HeightRatio * colTempo);
                x = r.x + +H_GAP + (colWidth + H_GAP) * (model.nbSteps - 1) + colWidth / 2 - lSize.width / 2;
                y = r.y + V_GAP + maxColHeight - colHeight + 1;
                labelEnd.setLocation(x, y);
            }


            @Override
            public Dimension preferredLayoutSize(Container parent)
            {
                return new Dimension(400, 300);
            }

            @Override
            public void addLayoutComponent(String string, Component cmpnt)
            {
                // Nothing 
            }

            @Override
            public void removeLayoutComponent(Component comp)
            {
                // Nothing 
            }


            @Override
            public Dimension minimumLayoutSize(Container parent)
            {
                return new Dimension(100, 70);
            }
        }

    }


}
